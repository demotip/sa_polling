require(mice)
require(dplyr)
load(file = file.path("C:/Users/Etienne Gagnon/Downloads/clean_data/ussd_only.Rdata"))
load(file = file.path("C:/Users/Etienne Gagnon/Downloads/clean_data/ussd_only.Rdata"))
load(file = file.path("C:/Users/Etienne Gagnon/Downloads/clean_data/ussd_only.Rdata"))
load(file = file.path("C:/Users/Etienne Gagnon/Downloads/data_clean/ussd_only.Rdata"))
ussd_only
ussd_only %>% filter(!is.na(total_sessions_ussd)) %>%
filter(log_total_time_interacting_min != -Inf & log_total_time_interacting_min != Inf) %>%
filter(log_total_time_in_system_min != -Inf & log_total_time_in_system_min != Inf)
ussd_only <- ussd_only %>% filter(!is.na(total_sessions_ussd)) %>%
filter(log_total_time_interacting_min != -Inf & log_total_time_interacting_min != Inf) %>%
filter(log_total_time_in_system_min != -Inf & log_total_time_in_system_min != Inf)
ussd_only_int <- ussd_only
always_inc <- c(categorical_imp_vars, binary_imp_vars, continous_imp_vars, ordered_imp_vars)
always_inc
always_inc
require(mice)
require(dplyr)
print("Starting imputations")
BASE_DIR <- "~/Dropbox/SA_Book_Replication_Repository/pk_main"
#BASE_DIR <- "~/Dropbox/sa_imputations/"
load(file = file.path("C:/Users/Etienne Gagnon/Downloads/data_clean/ussd_only.Rdata"))
ussd_only
#function make make interaction terms
make_categories <- function(var, data) {
data <- as.data.frame(data) #doesn't work with tbl_df
paste0(var, "_", seq(1:(length(levels(data[, var])) -1)))
}
#set up variable types, continuous variables are more easier to deal with
flipper_vars <- grep(pattern = "^ch[1-3]", names(ussd_only), value = TRUE)
count_channel_vars <- grep(pattern = "^(log)|(total)(.*_ussd)|(total._*sms)",
names(ussd_only), value = TRUE)
count_channel_vars <- count_channel_vars[count_channel_vars != "total_sessions_ussd"]
omit_channel_vars <- grep(pattern = "^(average)|(avg)((.*_ussd)|(._*sms))",
names(ussd_only), value = TRUE)
omit_channel_vars <- c(omit_channel_vars, "total_sessions_ussd", "total_time_interacting_min")
#ussd_only <- select(ussd_only, - race)
categorical_imp_vars <- c("ussd_treat", "race")
binary_imp_vars <- c("male", "whatsup_complete_bin", "end_or_vexp_ever",
"therm_ever", "vip_ever", flipper_vars,
"election2009_yes", "engagement_tooyoung")
#days from start is a difftime variable, take care of that
ussd_only <- ussd_only %>% mutate_at(binary_imp_vars, funs(as.factor)) %>%
mutate(days_from_start = as.numeric(days_from_start)) %>%
filter(!is.na(total_sessions_ussd))
#add mices .1, .2, etc. to the variables
factor_imp_vars_f <- sapply(c(categorical_imp_vars),
make_categories,
data = ussd_only, simplify = TRUE)
binary_imp_vars_f <- sapply(c(binary_imp_vars),
make_categories,
data = ussd_only, simplify = TRUE)
ordered_imp_vars <- c("engagement_enthusiasm")
continous_imp_vars <- c("age_num", "days_from_start",
count_channel_vars)
#factor continuous
varnames_df1 <- expand.grid (a = unlist(factor_imp_vars_f),
b= c(continous_imp_vars))
#binary_countinous
varnames_df2 <- expand.grid (a = unlist(binary_imp_vars_f),
b= c(continous_imp_vars))
#now make every possible interaction of the the binary and categorical variables with each other
# tvars <- length(unlist(factor_imp_vars_f))
# varnames_df2 <- expand.grid (a = unlist(factor_imp_vars_f)[1: length(binary_imp_vars)],
#                              b= unlist(factor_imp_vars_f)[(length(binary_imp_vars)+1): tvars])
#factor-binary
varnames_df3 <- expand.grid (a = factor_imp_vars_f,
b = unlist(binary_imp_vars_f))
#each binary variable by itself
# Error in a != b : comparison of these types is not implemented
varnames_df4 <- expand.grid (a = unlist(binary_imp_vars_f),
b = binary_imp_vars_f)
#each continruos variable by itself
varnames_df5 <- expand.grid (a = continous_imp_vars,
b = continous_imp_vars)  %>%
filter(a != b)
#each factor variable by itself
varnames_df6 <- expand.grid (a = factor_imp_vars_f,
b = factor_imp_vars_f) %>%
filter(substring(a, first = 1, last = 4) != substring(b, first = 1, last = 4)) %>%
dplyr::slice(1:(nrow(.)/2))
varnames_df <-
bind_rows(varnames_df1,
varnames_df2,
varnames_df3,
varnames_df4,
varnames_df5,
varnames_df5) %>%
mutate(varname = paste0(a, "__", b))
varnames_df <- dplyr::distinct(varnames_df, varname, .keep_all = TRUE)
varnames_df <- varnames_df %>% arrange(varname)
#STEPS in use MICE with Interaction Terms
#CREATE NA INTERACTION TERMS IN DATA
ussd_only <- ussd_only %>% filter(!is.na(total_sessions_ussd)) %>%
filter(log_total_time_interacting_min != -Inf & log_total_time_interacting_min != Inf) %>%
filter(log_total_time_in_system_min != -Inf & log_total_time_in_system_min != Inf)
ussd_only_int <- ussd_only
always_inc <- c(categorical_imp_vars, binary_imp_vars, continous_imp_vars, ordered_imp_vars)
always_exclude <- c("poi", "anon_id", "is_sms",
"ussd_treat_free", "ussd_treat_lottery", "ussd_other", "is_phone_number",
"channel_basic", "entry_mxit", "entry_mobi",
"age", "to_address_values", flipper_vars)
always_inc
always_exclude
names(ussd_only)[!names(ussd_only) %in% c(always_exclude, always_inc)]
names(ussd_only)
problems <- c(always_exclude, always_inc)[!c(always_exclude, always_inc) %in% names(ussd_only) ]
problems
omit_vars_mxit <-  grep(pattern = "mxit.*",
names(ussd_only), value = TRUE)
omit_vars_mxit
ussd_only_int <- ussd_only_int %>%
dplyr::select_(paste0("-",
(names(ussd_only)[!names(ussd_only) %in% c(always_inc, always_exclude)]))) %>%
select_(paste0("-",(omit_vars_mxit))) %>% select(-total_time_interacting_min) #one observation, figure out.
ussd_only_int
ussd_only_int[, varnames_df$varname] <- as.numeric(NA)
ussd_only_int[, varnames_df$varname]
?mice
require(mice)
require(dplyr)
install.packages('mice')
?mice
library(mice)
?mice
pmm_imp <- mice(ussd_only_int,
print = TRUE,
maxit = 0)
?mice
pmm_imp
ussd_only_int
pmm_imp
summary(pmm_imp$pad$data$log_total_time_in_system_min, detail = TRUE)
summary(pmm_imp$pad$data$log_total_time_interacting_min, detail = TRUE)
int_vars <- varnames_df$varname
int_vars
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars_b
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars_c <- sub(pattern = "^(.*?)(_[0-9])?(__)(.*)(_[0-9])?$", "\\1 * \\4", int_vars)
int_vars_c
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars <- varnames_df$varname
int_vars
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars_c <- sub(pattern = "^(.*?)(_[0-9])?(__)(.*)(_[0-9])?$", "\\1 * \\4", int_vars)
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars_row_terms <- (strsplit(int_vars_c, split = " * ", fixed = TRUE))
int_vars_row_terms
int_vars_terms <- (strsplit(int_vars_c, split = " * ", fixed = TRUE))
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_resp
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
pmm_imp$meth[int_vars]
def_pred <- quickpred(ussd_only_int, include = always_inc, exclude = always_exclude)
def_pred
?quickpred
pmm_imp$pred
pmm_imp$method["log_total_time_interaction"] <- "norm.boot"
pmm_imp$method["log_total_time_interaction"] <- "norm.boot"
for(i in 1:length(int_vars_row_terms)) {
cterms <- grep(paste0("^", int_vars_row_terms[[i]][1], ".*",
int_vars_row_terms[[i]][2]), int_vars,
value = TRUE) #no interaction between two contin
#print(int_vars_row_terms[[i]])
#print(int_vars_row_terms[[i]])
#print(cterms)
rterms <- int_vars_row_terms[[i]]
#print(rterms)
def_pred[rterms, cterms] <- 0
}
def_pred[int_vars, ] <- 0
ussd_only_samp <- ussd_only_int %>% sample_n(1100)
ussd_only_samp
pmm_imp
pmm_imp
int_vars <- varnames_df$varname
int_vars
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars <- varnames_df$varname
#write as regression equation
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars_c <- sub(pattern = "^(.*?)(_[0-9])?(__)(.*)(_[0-9])?$", "\\1 * \\4", int_vars)
int_vars_c
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars_c <- sub(pattern = "^(.*?)(_[0-9])?(__)(.*)(_[0-9])?$", "\\1 * \\4", int_vars)
int_vars_c
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars_c <- sub(pattern = "^(.*?)(_[0-9])?(__)(.*)(_[0-9])?$", "\\1 * \\4", int_vars)
int_vars_c <- unique(sub(pattern = "^(.*)(_[0-9])", "\\1", int_vars_c))
int_vars_c
int_vars_row_terms <- (strsplit(int_vars_c, split = " * ", fixed = TRUE))
int_vars_row_terms
int_vars_terms <- (strsplit(int_vars_c, split = " * ", fixed = TRUE))
int_vars_terms
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_resp
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
int_vars
for(i in 1:length(int_vars_row_terms)) {
cterms <- grep(paste0("^", int_vars_row_terms[[i]][1], ".*",
int_vars_row_terms[[i]][2]), int_vars,
value = TRUE) #no interaction between two contin
#print(int_vars_row_terms[[i]])
#print(int_vars_row_terms[[i]])
#print(cterms)
rterms <- int_vars_row_terms[[i]]
#print(rterms)
def_pred[rterms, cterms] <- 0
}
cterms
rterms <- int_vars_row_terms[[i]]
rterms
def_pred[rterms, cterms] <- 0
def_pred[rterms, cterms]
def_pred[int_vars, ] <- 0
def_pred[int_vars, ]
ussd_only_samp <- ussd_only_int %>% sample_n(1100)
ussd_only_samp
pmm_imp$meth
def_pred
test_imp <- mice(ussd_only_samp,
method = pmm_imp$meth,
#post=post,
predictorMatrix = def_pred,
seed = 20160118,
m = 8,
maxit=2)
pmm_imp$meth
def_pred
cterms
int_vars_row_terms[[i]]
int_vars_row_terms[[i]][1]
int_vars
int_vars_row_terms[[i]]
rterms
?mice
pmm_imp$meth,
pmm_imp$meth
def_pred
pmm_imp$meth
int_vars_c
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_c)
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_c)
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
pmm_imp$method["log_total_time_interaction"] <- "norm.boot"
for(i in 1:length(int_vars_row_terms)) {
cterms <- grep(paste0("^", int_vars_row_terms[[i]][1], ".*",
int_vars_row_terms[[i]][2]), int_vars,
value = TRUE) #no interaction between two contin
#print(int_vars_row_terms[[i]])
#print(int_vars_row_terms[[i]])
#print(cterms)
rterms <- int_vars_row_terms[[i]]
#print(rterms)
def_pred[rterms, cterms] <- 0
}
def_pred[int_vars, ] <- 0
pmm_imp$meth
test_imp <- mice(ussd_only_samp,
method = pmm_imp$meth,
#post=post,
predictorMatrix = def_pred,
seed = 20160118,
m = 8,
maxit=2)
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
int_vars
int_vars_b <- sub(pattern = "(.*_[0-9])(__)(.*)", "\\1 * \\3", int_vars)
int_vars_b
int_vars_b <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_b)
int_vars_b
def_pred
int_vars_resp <- gsub(pattern = "(_)([0-9])", ".\\2", int_vars_c)
pmm_imp$meth[int_vars] <- paste0("~I(", int_vars_resp, ")")
int_vars_c
